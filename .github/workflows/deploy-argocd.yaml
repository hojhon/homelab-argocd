name: Deploy ArgoCD

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  deploy:
    runs-on: [self-hosted, dev-ops]
    environment: homelab-variables
    steps:
      - uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubeconfig
        run: |
            # Write multiline kubeconfig from environment secret
            kubectl --kubeconfig=/home/github-runner/kubeconfig.yaml version --client=true || true

      - name: Create namespaces
        run: |
          kubectl --kubeconfig=/home/github-runner/kubeconfig.yaml create namespace argocd --dry-run=client -o yaml | kubectl --kubeconfig=/home/github-runner/kubeconfig.yaml apply -f -
          kubectl --kubeconfig=/home/github-runner/kubeconfig.yaml create namespace cloudflare --dry-run=client -o yaml | kubectl --kubeconfig=/home/github-runner/kubeconfig.yaml apply -f -

      - name: Create ArgoCD admin password
        run: |
          kubectl -n argocd create secret generic argocd-secret \
            --from-literal=admin.password="${{ secrets.ARGOCD_ADMIN_PASSWORD }}" \
            --from-literal=admin.passwordMtime="$(date +%FT%T%Z)" \
            --dry-run=client -o yaml | \
              kubectl --kubeconfig=kubeconfig.yaml apply --validate=false -f -

      - name: Create Cloudflared tunnel token
        run: |
          kubectl -n cloudflare create secret generic cloudflared-cloudflare-tunnel-remote \
            --from-literal=tunnelToken="${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}" \
            --dry-run=client -o yaml | \
              kubectl --kubeconfig=kubeconfig.yaml apply --validate=false -f -

      - name: Apply ArgoCD
        run: |
         kubectl --kubeconfig=kubeconfig.yaml apply --validate=false -f apps/argocd.yaml
         kubectl --kubeconfig=kubeconfig.yaml -n argocd wait --timeout=60s --for=condition=established crd/applications.argoproj.io || true

      - name: Wait for ArgoCD to be ready
        run: |
         kubectl --kubeconfig=kubeconfig.yaml -n argocd wait --for=condition=available --timeout=300s deployment/argocd-server || true
          sleep 30  # Give additional time for services to stabilize

      - name: Apply Cloudflared
        run: kubectl --kubeconfig=kubeconfig.yaml apply --validate=false -f apps/cloudflared.yaml

      - name: Clean up
        if: always()
        run: rm -f kubeconfig.yaml