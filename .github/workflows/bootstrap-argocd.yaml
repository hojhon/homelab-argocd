name: 1 - Bootstrap ArgoCD

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  bootstrap:
    runs-on: [self-hosted, dev-ops]
    environment: homelab-variables
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubeconfig
        run: |
          if [ -f "/home/github-runner/.kube/config" ]; then
            echo "KUBECONFIG=/home/github-runner/.kube/config" >> $GITHUB_ENV
          elif [ -f "/etc/rancher/k3s/k3s.yaml" ]; then
            cp /etc/rancher/k3s/k3s.yaml kubeconfig.yaml
            chmod 600 kubeconfig.yaml
            echo "KUBECONFIG=$(pwd)/kubeconfig.yaml" >> $GITHUB_ENV
          else
            echo "No kubeconfig found on runner" >&2
            exit 1
          fi

      - name: Create Namespaces and Secrets
        env:
          ARGOCD_PASS: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}
          CF_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
        run: |
          kubectl --kubeconfig="$KUBECONFIG" create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          kubectl --kubeconfig="$KUBECONFIG" create namespace cloudflare --dry-run=client -o yaml | kubectl apply -f -
          
          # Generate a random secret key for the ArgoCD server
          ARGOCD_SECRET_KEY=$(openssl rand -base64 32)

          # Create ArgoCD secret with both the admin password and the server secret key
          kubectl --kubeconfig="$KUBECONFIG" -n argocd create secret generic argocd-secret \
            --from-literal=admin.password="$ARGOCD_PASS" \
            --from-literal=admin.passwordMtime="$(date +%FT%T%Z)" \
            --from-literal=server.secretkey="$ARGOCD_SECRET_KEY" \
            --dry-run=client -o yaml | kubectl apply --validate=false -f -
          
          # Delete existing cloudflared secret if it exists to avoid conflicts
          kubectl --kubeconfig="$KUBECONFIG" delete secret cloudflared-cloudflare-tunnel-remote -n cloudflare --ignore-not-found
          
          # Create Cloudflared tunnel token using the env variable (matching our manual fix)
          kubectl --kubeconfig="$KUBECONFIG" create secret generic cloudflared-cloudflare-tunnel-remote \
            --from-literal=tunnelToken="$CF_TOKEN" \
            -n cloudflare

      - name: Install ArgoCD CLI
        run: |
          echo "Installing ArgoCD CLI..."
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64

      - name: Delete Existing ArgoCD Resources
        run: |
          echo "Deleting existing ArgoCD resources to handle immutable field changes..."
          kubectl --kubeconfig="$KUBECONFIG" delete deployment -n argocd --all --ignore-not-found
          kubectl --kubeconfig="$KUBECONFIG" delete statefulset -n argocd --all --ignore-not-found

      - name: Install Core ArgoCD Controller
        run: |
          echo "Applying official ArgoCD install manifest..."
          kubectl --kubeconfig="$KUBECONFIG" apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Wait for Initial ArgoCD Server
        run: |
          echo "Waiting for the initial argocd-server deployment..."
          kubectl --kubeconfig="$KUBECONFIG" wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

      - name: Apply the Root Application for GitOps
        run: |
          echo "Applying the root application to hand over control to GitOps..."
          kubectl --kubeconfig="$KUBECONFIG" apply -f homelab-apps/root-application.yaml

      - name: Wait for GitOps Handover to Complete
        run: |
          echo "Waiting for the root application to sync..."
          kubectl --kubeconfig="$KUBECONFIG" wait --for=jsonpath='{.status.health.status}'=Healthy \
            --timeout=300s -n argocd application/root
          
          echo "Waiting for all applications to be synced..."
          sleep 30
          kubectl --kubeconfig="$KUBECONFIG" get applications -n argocd
          echo "Bootstrap complete! ArgoCD is now managing all applications from Git."

      - name: Configure Repository Access
        env:
          ARGO_PAT: ${{ secrets.ARGO_PAT }}
        run: |
          echo "Waiting for ArgoCD server to be fully ready..."
          kubectl --kubeconfig="$KUBECONFIG" wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd
          
          # Port forward to access ArgoCD (run in background)
          kubectl --kubeconfig="$KUBECONFIG" port-forward svc/argocd-server -n argocd 8080:443 &
          PF_PID=$!
          sleep 10
          
          # Login to ArgoCD
          echo "Logging into ArgoCD..."
          argocd login localhost:8080 --username admin --password "${{ secrets.ARGOCD_ADMIN_PASSWORD }}" --insecure
          
          echo "Configuring repository access in ArgoCD..."
          argocd repo add https://github.com/hojhon/homelab-argocd.git \
            --username "hojhon" \
            --password "$ARGO_PAT" \
            --insecure-skip-server-verification
          
          # Clean up port forward
          kill $PF_PID || true

      - name: Clean up
        if: always()
        run: rm -f kubeconfig.yaml || true