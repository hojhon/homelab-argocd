name: 1 - Bootstrap ArgoCD

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  bootstrap:
    runs-on: [self-hosted, dev-ops]
    environment: homelab-variables
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure Kubeconfig
        run: |
          if [ -f "/home/github-runner/.kube/config" ]; then
            echo "KUBECONFIG=/home/github-runner/.kube/config" >> $GITHUB_ENV
          elif [ -f "/etc/rancher/k3s/k3s.yaml" ]; then
            cp /etc/rancher/k3s/k3s.yaml kubeconfig.yaml
            chmod 600 kubeconfig.yaml
            echo "KUBECONFIG=$(pwd)/kubeconfig.yaml" >> $GITHUB_ENV
          else
            echo "No kubeconfig found on runner" >&2
            exit 1
          fi

      - name: Create Namespaces and Secrets
        env:
          ARGOCD_PASS: ${{ secrets.ARGOCD_ADMIN_PASSWORD }}
          CF_TOKEN: ${{ secrets.CLOUDFLARE_TUNNEL_TOKEN }}
        run: |
          kubectl --kubeconfig="$KUBECONFIG" create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          kubectl --kubeconfig="$KUBECONFIG" create namespace cloudflare --dry-run=client -o yaml | kubectl apply -f -
          
          # Generate a random secret key for the ArgoCD server
          ARGOCD_SECRET_KEY=$(openssl rand -base64 32)

          # Create ArgoCD secret with both the admin password and the server secret key
          kubectl --kubeconfig="$KUBECONFIG" -n argocd create secret generic argocd-secret \
            --from-literal=admin.password="$ARGOCD_PASS" \
            --from-literal=admin.passwordMtime="$(date +%FT%T%Z)" \
            --from-literal=server.secretkey="$ARGOCD_SECRET_KEY" \
            --dry-run=client -o yaml | kubectl apply --validate=false -f -
          
          # Create Cloudflared tunnel token using the env variable
          kubectl --kubeconfig="$KUBECONFIG" -n cloudflare create secret generic cloudflared-cloudflare-tunnel-remote \
            --from-literal=tunnelToken="$CF_TOKEN" \
            --dry-run=client -o yaml | kubectl apply --validate=false -f -

      - name: Install Core ArgoCD Controller
        run: |
          echo "Applying official ArgoCD install manifest..."
          kubectl --kubeconfig="$KUBECONFIG" apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

      - name: Wait for Initial ArgoCD Server
        run: |
          echo "Waiting for the initial argocd-server deployment..."
          kubectl --kubeconfig="$KUBECONFIG" wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

      - name: Apply the Root Application for GitOps
        run: |
          echo "Applying the root application to hand over control to GitOps..."
          kubectl --kubeconfig="$KUBECONFIG" apply -f homelab-apps/root-application.yaml

      - name: Wait for GitOps Handover to Complete
        run: |
          echo "Waiting for the GitOps-managed 'argocd' application to become healthy..."
          kubectl --kubeconfig="$KUBECONFIG" wait --for=jsonpath='{.status.health.status}'=Healthy \
            --timeout=300s -n argocd application/argocd
          echo "Bootstrap complete! ArgoCD is now managing all applications from Git."

      - name: Clean up
        if: always()
        run: rm -f kubeconfig.yaml || true